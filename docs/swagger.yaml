basePath: /
definitions:
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      re_password:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server API.
  title: Rest Skeleton API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login to the system
      operationId: login
      parameters:
      - description: Idempotency-Key
        in: header
        name: Idempotency-Key
        required: true
        type: string
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: List Users
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - Bearer: []
      summary: List Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: User to add
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      - description: Idempotency-Key
        in: header
        name: Idempotency-Key
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - Bearer: []
      summary: Create User
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Idempotency-Key
        in: header
        name: Idempotency-Key
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete User By ID
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get User By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - Bearer: []
      summary: Get User By ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      - description: Idempotency-Key
        in: header
        name: Idempotency-Key
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - Bearer: []
      summary: Update User
      tags:
      - Users
schemes:
- http
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
